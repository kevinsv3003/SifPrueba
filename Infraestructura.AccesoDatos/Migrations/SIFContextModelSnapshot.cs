// <auto-generated />
using System;
using Infraestructura.AccesoDatos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infraestructura.AccesoDatos.Migrations
{
    [DbContext(typeof(SIFContext))]
    partial class SIFContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entidades.Auditoria.LogError", b =>
                {
                    b.Property<int>("LogErrorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescripcionErrorBD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaProceso")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ProgramaProcedimiento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Variables")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogErrorID");

                    b.ToTable("LogError", "AUDI");
                });

            modelBuilder.Entity("Entidades.Auditoria.LogTransaccion", b =>
                {
                    b.Property<int>("LogTransaccionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaProceso")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Variables")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogTransaccionID");

                    b.ToTable("LogTransaccion", "AUDI");
                });

            modelBuilder.Entity("Entidades.Menu", b =>
                {
                    b.Property<Guid>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MenuId");

                    b.Property<string>("Accion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Accion");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Area");

                    b.Property<string>("Controlador")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Controlador");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Descripcion");

                    b.Property<bool>("EstaAnulado")
                        .HasColumnType("bit")
                        .HasColumnName("EstaAnulado");

                    b.Property<string>("IconoCss")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IconoCss");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nombre");

                    b.Property<Guid>("PadreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Posicion")
                        .HasColumnType("int");

                    b.Property<string>("Vista")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NombreVista");

                    b.Property<bool>("esPrincipal")
                        .HasColumnType("bit")
                        .HasColumnName("esPrincipal");

                    b.HasKey("MenuId");

                    b.ToTable("Menu", "MENU");
                });

            modelBuilder.Entity("Entidades.Renta", b =>
                {
                    b.Property<int>("RentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("EsBorrado")
                        .HasColumnType("bit");

                    b.Property<string>("NombreRenta")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("RentaId");

                    b.ToTable("Rentas", "SEG");
                });

            modelBuilder.Entity("Entidades.RolApp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Descripcion");

                    b.Property<bool>("EsBorrado")
                        .HasColumnType("bit")
                        .HasColumnName("EsBorrado");

                    b.Property<int>("LogId")
                        .HasColumnType("int")
                        .HasColumnName("LogId");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UsuarioLogId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioLogId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "SEG");
                });

            modelBuilder.Entity("Entidades.RolNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsBorrado")
                        .HasColumnType("bit")
                        .HasColumnName("EsBorrado");

                    b.Property<int>("LogId")
                        .HasColumnType("int")
                        .HasColumnName("LogId");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UsuarioLogId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioLogId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RolesNotificaciones", "SEG");
                });

            modelBuilder.Entity("Entidades.RolesMenu", b =>
                {
                    b.Property<Guid>("RolesMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RolesMenuId");

                    b.Property<bool>("EstaAnulado")
                        .HasColumnType("bit")
                        .HasColumnName("EstaAnulado");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MenuId");

                    b.Property<Guid>("RolId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleId");

                    b.HasKey("RolesMenuId");

                    b.HasIndex("MenuId");

                    b.HasIndex("RolId");

                    b.ToTable("RolesMenu", "MENU");
                });

            modelBuilder.Entity("Entidades.UsuarioApp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RentaId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Usuarios", "SEG");
                });

            modelBuilder.Entity("Entidades.UsuarioLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EsBorrado")
                        .HasColumnType("bit")
                        .HasColumnName("EsBorrado");

                    b.Property<int>("LogId")
                        .HasColumnType("int")
                        .HasColumnName("LogId");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UsuarioLogId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioLogId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UsuariosLogin", "SEG");
                });

            modelBuilder.Entity("Entidades.UsuarioNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsBorrado")
                        .HasColumnType("bit")
                        .HasColumnName("EsBorrado");

                    b.Property<int>("LogId")
                        .HasColumnType("int")
                        .HasColumnName("LogId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UsuarioLogId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioLogId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsuariosNotificaciones", "SEG");
                });

            modelBuilder.Entity("Entidades.UsuarioRol", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EsBorrado")
                        .HasColumnType("bit")
                        .HasColumnName("EsBorrado");

                    b.Property<int>("LogId")
                        .HasColumnType("int")
                        .HasColumnName("LogId");

                    b.Property<int>("UsuarioLogId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioLogId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UsuariosRoles", "SEG");
                });

            modelBuilder.Entity("Entidades.UsuarioToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EsBorrado")
                        .HasColumnType("bit")
                        .HasColumnName("EsBorrado");

                    b.Property<int>("LogId")
                        .HasColumnType("int")
                        .HasColumnName("LogId");

                    b.Property<int>("UsuarioLogId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioLogId");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UsuariosToken", "SEG");
                });

            modelBuilder.Entity("Entidades.RolNotificacion", b =>
                {
                    b.HasOne("Entidades.RolApp", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entidades.RolesMenu", b =>
                {
                    b.HasOne("Entidades.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.RolApp", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Entidades.UsuarioLogin", b =>
                {
                    b.HasOne("Entidades.UsuarioApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entidades.UsuarioNotificacion", b =>
                {
                    b.HasOne("Entidades.UsuarioApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entidades.UsuarioRol", b =>
                {
                    b.HasOne("Entidades.RolApp", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.UsuarioApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entidades.UsuarioToken", b =>
                {
                    b.HasOne("Entidades.UsuarioApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
